# -*- coding: utf-8 -*-
"""Untitled0-2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YO2HiWjyJm0yLkaP7ZRLQW2_pygI2h2D
"""

import getpass
import pickle
import datetime

class Task:
    def __init__(self, description, priority, done=False):
        self.description = description
        self.priority = priority
        self.done = done

class User:
    def __init__(self, username, password):
        self.username = username
        self.password = password
        self.tasks = []
        self.notification = False
        self.phone_number = None

def create_account():
    username = input("Enter a username: ")
    password = getpass.getpass("Enter a password: ")
    user = User(username, password)
    users.append(user)
    print("Account created successfully!")

def login():
    username = input("Enter your username: ")
    password = getpass.getpass("Enter your password: ")
    user = None
    for existing_user in users:
        if existing_user.username == username and existing_user.password == password:
            user = existing_user
            break

    if user:
        print("Login successful!")
        return user
    else:
        print("Invalid username or password.")
        return None

def add_task(user):
    task_description = input("Enter a task: ")
    task_priority = input("Enter the priority (low, medium, high): ")
    task = Task(task_description, task_priority)
    user.tasks.append(task)
    print("Task added successfully!")

def remove_task(user):
    if len(user.tasks) == 0:
        print("No tasks to remove.")
    else:
        print("Current tasks:")
        for index, task in enumerate(user.tasks):
            print(f"{index+1}. {task.description} (Priority: {task.priority}) - {'Done' if task.done else 'Not Done'}")
        choice = int(input("Enter the number of the task to remove or reschedule for tomorrow: "))
        if choice > 0 and choice <= len(user.tasks):
            task = user.tasks[choice - 1]
            action = input("Enter 'R' to reschedule for tomorrow or press Enter to remove: ")
            if action.lower() == 'r':
                task_date = datetime.date.today() + datetime.timedelta(days=1)
                task.description += f" (Rescheduled for {task_date.strftime('%Y-%m-%d')})"
                print(f"Task '{task.description}' rescheduled for tomorrow!")
            else:
                removed_task = user.tasks.pop(choice - 1)
                print(f"Task '{removed_task.description}' (Priority: {removed_task.priority}) removed successfully!")
                print("Please don't quit. You can do this!")
        else:
            print("Invalid choice.")

def mark_task_done(user):
    if len(user.tasks) == 0:
        print("No tasks to mark as done.")
    else:
        print("Not Done tasks:")
        not_done_tasks = [task for task in user.tasks if not task.done]
        for index, task in enumerate(not_done_tasks):
            print(f"{index+1}. {task.description} (Priority: {task.priority}) - Not Done")
        print("Done tasks:")
        done_tasks = [task for task in user.tasks if task.done]
        for index, task in enumerate(done_tasks):
            print(f"{index+1}. {task.description} (Priority: {task.priority}) - Done")
        choice = int(input("Enter the number of the task to mark as done: "))
        if choice > 0 and choice <= len(not_done_tasks):
            task = not_done_tasks[choice - 1]
            task.done = True
            print(f"Task '{task.description}' marked as done!")
        else:
            print("Invalid choice.")

def view_tasks(user):
    if len(user.tasks) == 0:
        print("No tasks added yet.")
    else:
        print("Not Done tasks:")
        not_done_tasks = [task for task in user.tasks if not task.done]
        for index, task in enumerate(not_done_tasks):
            print(f"{index+1}. {task.description} (Priority: {task.priority}) - Not Done")
        print("Done tasks:")
        done_tasks = [task for task in user.tasks if task.done]
        for index, task in enumerate(done_tasks):
            print(f"{index+1}. {task.description} (Priority: {task.priority}) - Done")
        if len(not_done_tasks) == 0:
            print("Congratulations! All tasks are done.")

        choice = input("Enter 'D' to mark a task as done, 'R' to reschedule a task, or press Enter to go back: ")
        if choice.lower() == 'd':
            mark_task_done(user)
        elif choice.lower() == 'r':
            reschedule_task(user)

def reschedule_task(user):
    if len(user.tasks) == 0:
        print("No tasks to reschedule.")
    else:
        print("Current tasks:")
        for index, task in enumerate(user.tasks):
            print(f"{index+1}. {task.description} (Priority: {task.priority}) - {'Done' if task.done else 'Not Done'}")
        choice = int(input("Enter the number of the task to reschedule for tomorrow: "))
        if choice > 0 and choice <= len(user.tasks):
            task = user.tasks[choice - 1]
            task_date = datetime.date.today() + datetime.timedelta(days=1)
            task.description += f" (Rescheduled for {task_date.strftime('%Y-%m-%d')})"
            print(f"Task '{task.description}' rescheduled for tomorrow!")
        else:
            print("Invalid choice.")

def turn_on_notification(user):
    if user.notification:
        print("Notifications are already turned on.")
    else:
        phone_number = input("Enter your phone number: ")
        user.notification = True
        user.phone_number = phone_number
        print("Notifications turned on successfully.")

def turn_off_notification(user):
    if not user.notification:
        print("Notifications are already turned off.")
    else:
        user.notification = False
        user.phone_number = None
        print("Notifications turned off successfully.")

def change_password(user):
    current_password = getpass.getpass("Enter your current password: ")
    if current_password != user.password:
        print("Incorrect password.")
        return

    new_password = getpass.getpass("Enter your new password: ")
    confirm_password = getpass.getpass("Confirm your new password: ")
    if new_password == confirm_password:
        user.password = new_password
        print("Password changed successfully!")
    else:
        print("Passwords do not match.")

def save_data():
    with open("data.pickle", "wb") as file:
        pickle.dump(users, file)
    print("Data saved successfully!")

def load_data():
    try:
        with open("data.pickle", "rb") as file:
            users.extend(pickle.load(file))
        print("Data loaded successfully!")
    except FileNotFoundError:
        print("No saved data found.")

users = []

def main():
    load_data()

    user = None
    while True:
        if user is None:
            print("\n---- To-Do List Menu ----")
            print("1. Create Account")
            print("2. Login")
            print("3. Exit")
            choice = input("Enter your choice (1-3): ")

            if choice == '1':
                create_account()
                save_data()
            elif choice == '2':
                user = login()
            elif choice == '3':
                save_data()
                print("Goodbye!")
                break
            else:
                print("Invalid choice. Please try again.")
        else:
            print(f"\n---- Welcome, {user.username}! ----")
            print("1. Add Task")
            print("2. Remove Task")
            print("3. View Tasks")
            print("4. Turn On Notifications")
            print("5. Turn Off Notifications")
            print("6. Change Password")
            print("7. Logout")
            print("8. Exit")
            choice = input("Enter your choice (1-8): ")

            if choice == '1':
                add_task(user)
                save_data()
            elif choice == '2':
                remove_task(user)
                save_data()
            elif choice == '3':
                view_tasks(user)
                save_data()
            elif choice == '4':
                turn_on_notification(user)
                save_data()
            elif choice == '5':
                turn_off_notification(user)
                save_data()
            elif choice == '6':
                change_password(user)
                save_data()
            elif choice == '7':
                user = None
                print("Logged out successfully!")
            elif choice == '8':
                save_data()
                print("Goodbye!")
                break
            else:
                print("Invalid choice. Please try again.")

if __name__ == "__main__":
    main()